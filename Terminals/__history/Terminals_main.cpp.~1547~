#include <vcl.h>
#pragma hdrstop
#include "Terminals_main.h"
#include <fstream>
#include <iomanip>
#include <iostream>
#include <string>
#include <cstring>
using namespace std;
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TMainForm *MainForm;
//---------------------------------------------------------------------------
__fastcall TMainForm::TMainForm(TComponent* Owner)
	: TForm(Owner)
{
}

		  void __fastcall TMainForm::Menu_CloseClick(TObject *Sender)
{
Close();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::frmt_nddtmeClick(TObject *Sender)
{	if(frmt_nddtme->Checked) {
		GroupBox_from_to->SendToBack();
		GroupBox_period->BringToFront();
		Eperiod->SetFocus();
	}
	else
	{
		GroupBox_from_to->BringToFront();
		GroupBox_period->SendToBack();
        EFromT->SetFocus();
	}
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_LoadBClick(TObject *Sender)
{   if(Menu_Save->Enabled ==true)
	{
		switch(Application->MessageBoxW((L"Вы хотите сохранить измененения в файл "+OpenDialog->FileName+L"?").w_str(),
		Application->Title.w_str(),MB_YESNOCANCEL|MB_ICONQUESTION | MB_DEFBUTTON3))
		{
			case ID_YES: SAVEExecute(Sender); break;
			case ID_NO: break;
			case ID_CANCEL: return;
		}
	}
	OpenDialog->FileName=L"";
	if(!OpenDialog->Execute()) {
		StatBar ->Panels->Items[0]->Text = L"Диалог загрузки был закрыт!";
        OpenDialog->FileName=StatBar->Panels->Items[1]->Text;
		return;
	}
	ifstream ifile(AnsiString(OpenDialog->FileName).c_str(), ios::binary);
	if (!ifile.is_open())
	{   StatBar ->Panels->Items[0]->Text = L"Файл "+OpenDialog->FileName+ L" не открыт!" ;
		return;
	}
	trmnlsPep.Length = 0;
	tElem Prtct;
	ifile.read((char *)&Prtct, sizeof(tElem));
	Cdo->Checked = true;
	ifile.read((char *)&termsavlble, sizeof(tElem));
	try{
		for(int i=0;i<Prtct;i++)
		   {
		     trmnlsPep.Length +=1;
			 ifile.read((char *)&trmnlsPep[i].USlen,sizeof(unsigned _int8));
			 trmnlsPep[i].Phio.resize(trmnlsPep[i].USlen);
			 ifile.read((char *)trmnlsPep[i].Phio.data(),trmnlsPep[i].USlen);
			 ifile.read((char *)&trmnlsPep[i].termPckd, sizeof(tElem));
			 ifile.read((char *)&trmnlsPep[i].fromT, sizeof(unsigned _int8));
			 ifile.read((char *)&trmnlsPep[i].toT, sizeof(unsigned _int8));
			};
	}catch(...) {
		trmnlsPep.Length = 0;
		ifile.close();
		Application->MessageBox(L"Ошибка при загрузке информации",Application->Title.w_str(),MB_OK|MB_ICONERROR);
		OpenDialog->FileName=L"Безымянный";
		return;
	}
	ifile.close();
	if(Prtct!= trmnlsPep.Length)
	{
		Application->MessageBox(L"Двоичные данные в файле повреждены!",Application->Title.w_str(),MB_OK|MB_ICONERROR);
		OpenDialog->FileName=L"Безымянный";
		trmnlsPep.Length = 0;
		return;
	}
	for(int i=StrTabl->RowCount;i>0;i--)
	{
		StrTabl->Rows[i]->Clear();
	}
	StrTabl->RowCount = 2;
	StrTabl->RowHeights[1]=StrTabl->DefaultRowHeight;
	for(int i=1;i<=trmnlsPep.Length;i++)
	{
		if(i!=1)StrTabl->RowCount +=1;
		StrTabl->Cells[0][i]=String(trmnlsPep[i-1].Phio.c_str());
	}
	Bobrstart->Enabled = true;
	Etrmnls->Enabled = false;
	SAVE -> Enabled = false;
	Menu_SaveAs -> Enabled = true;
	Menu_Save_R ->Enabled = true;
	Menu_Create->Enabled = true;
	Menu_StrT_D->Enabled=true;
	Menu_StrT_T->Enabled=true;
	Etrmnls->Value=termsavlble;
    DTT->Refresh();
	StatBar->Panels->Items[1]->Text =OpenDialog->FileName;
	Ch_autoWClick(Sender);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_SaveAsClick(TObject *Sender)
{   SaveDialog->Filter=L"Терминалы|*.RMT|Все файлы|*.*";
	SaveDialog->DefaultExt=L"RMT";
    SaveDialog->FileName = StatBar->Panels->Items[1]->Text;
	if(!SaveDialog->Execute()) {
		StatBar ->Panels->Items[0]->Text = L"Диалог сохранения был закрыт!";
		return;
	}
	OpenDialog->FileName = SaveDialog->FileName;
	SAVEExecute(Sender);
}
//--------------------------------------------------------------------------
void __fastcall TMainForm::FormCloseQuery(TObject *Sender, bool &CanClose)
{
if(Menu_Save->Enabled==true)
	switch(Application->MessageBoxW((L"Вы хотите сохранить измененения в файл "+OpenDialog->FileName+L"?").w_str(),
	Application->Title.w_str(),MB_YESNOCANCEL|MB_ICONQUESTION | MB_DEFBUTTON3))
	{
		case ID_YES: SAVEExecute(Sender);
		if(!bSaved)
		{
			CanClose=false;
			return;
		}
		else return;
		case ID_NO: return;
		case ID_CANCEL: CanClose=false;
	}
}
//--------------------------------------------------------------------------
void __fastcall TMainForm::Menu_Save_RClick(TObject *Sender)
{	SaveDialog->FileName="";
SaveDialog->Filter=L"Текстовые файлы|*.txt|Все файлы|*.*";
	SaveDialog->DefaultExt=L"txt";
	if(!SaveDialog->Execute())
	{
		StatBar ->Panels->Items[0]->Text = L"Диалог сохранения результатов был закрыт!";
		return;
	}
	ofstream ofileR(AnsiString(SaveDialog->FileName).c_str());
	if(!ofileR.is_open())
	{
		StatBar ->Panels->Items[0]->Text ="Файл не открыт!";
		return;
	}
	tElem length=18;
	for(int i=0;i<trmnlsPep.Length;i++)
	if(trmnlsPep[i].Phio.size()>length)length =trmnlsPep[i].Phio.size();
	ofileR<<"Таблица с резервированным машинным временем\nТерминалов доступно:"<< termsavlble <<"\n";
	ofileR<<setw(length)<<"Пользователь\\Время"<<"  0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n";
	for(int i=0;i<trmnlsPep.Length;i++)
	{
		ofileR<<setw(length)<<trmnlsPep[i].Phio<<setw(3+3*trmnlsPep[i].fromT)<<"*";
		for(int j =trmnlsPep[i].fromT+1;j<=trmnlsPep[i].toT;j++) ofileR<<setw(3)<<"*";
		ofileR<<"\n";
	}
	ofileR.close();
	return;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::CdoClick(TObject *Sender)
{	if(Cdo->Checked)
	{   Bobrstart->Enabled = true;
		Menu_DTT_E->Enabled=true;
		if(Etrmnls->Value == termsavlble)
		{
			Etrmnls->Enabled = false;
			DTT->Refresh();
			return;
		}
		if(Etrmnls->Value < termsavlble && StrTabl->RowHeights[1]!=-1)
		{
			switch(Application->MessageBoxW((L"При уменьшении кол-ва доступных терминалов все время и пользователи,зарезервировавшие его на "
			+IntToStr(Etrmnls->Value +1)+
			L"-м и последующих терминалах (если они были доступны),будут удалены! Вы уверены?").w_str(),
			Application->Title.w_str(),MB_YESNO|MB_ICONQUESTION))
			{
				case ID_YES: break;
				case ID_NO: Etrmnls->Value = termsavlble ;Cdo->Checked = false;
				return;
			}
		}
		Etrmnls->Enabled = false;
		if(StrTabl->RowHeights[1]!=-1)SAVE->Enabled=true;
		if(Etrmnls->Value > termsavlble)
		{
			termsavlble = Etrmnls->Value;
			DTT->Refresh();
			StrTabl->Refresh();
			return;
		}
		termsavlble = Etrmnls->Value;

		for(int i=0;i<trmnlsPep.Length;i++)
		{
			if(trmnlsPep[i].termPckd > Etrmnls->Value)
			{
				for(int j=i;j<trmnlsPep.Length -1;j++)
				{   trmnlsPep[j]=trmnlsPep[j+1];
				}
				trmnlsPep.Length -= 1;
				i--;
			}

		}
		for(int i=StrTabl->RowCount;i>0;i--)
		{
			StrTabl->Rows[i]->Clear();
		}
		StrTabl->RowCount = 2;
		for(int i=1;i<=trmnlsPep.Length;i++)
		{
			if(i!=1)StrTabl->RowCount +=1;
			StrTabl->Cells[0][i]=String(trmnlsPep[i-1].Phio.c_str());
		}
		if(trmnlsPep.Length ==0) StrTabl->RowHeights[1]=-1;
		else StrTabl->RowHeights[1]=StrTabl->DefaultRowHeight;
	}
	else {
		Bobrstart->Enabled = false;
		Etrmnls->Enabled = true;
		Menu_DTT_E->Enabled=false;
	}
	DTT->Refresh();
	StrTabl->Refresh();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::BobrstartClick(TObject *Sender)
{
if(E_Phio->Text==L"")
	{
		StatBar ->Panels->Items[0]->Text =L"Поле фамилии и инициалов пользователя незаполненно!";
		E_Phio->SetFocus();
		return;
	}
	if(E_Phio->Text.Length()>0)
		if(E_Phio->Text[E_Phio->Text.Length()] != L'.')
	{
		StatBar ->Panels->Items[0]->Text =L"Завершите запись фамилии и инициалов пользователя!";
		E_Phio->SetFocus();
		return;
	}
	for(int i=1;i<StrTabl->RowCount;i++)
		if(E_Phio->Text == StrTabl->Cells[0][i])
		{
			StatBar ->Panels->Items[0]->Text =L"Пользователь "+ StrTabl->Cells[0][i]+L" уже зарезервировал временной промежуток!";
			E_Phio->SetFocus();
			return;
		}
	bool vidVInf = false;
	tElem helptrmn, prstart;
	if(!frmt_nddtme->Checked || forDTT)
	{
		for(int i=1;i<=termsavlble;i++)
		{   if(!vidVInf)
			{   vidVInf=true;
					for(int j=0;j<trmnlsPep.Length;j++)
				{	if(trmnlsPep[j].termPckd == i)
					{	if(!(EFromT->Value > trmnlsPep[j].toT || EToT->Value < trmnlsPep[j].fromT)) vidVInf= false;
					}
					if(j== trmnlsPep.Length-1 && vidVInf) helptrmn = i;
				}
			}
		}
	}
	else
	{   for(int i=1;i<=termsavlble;i++)
		{
			for(int j=0;j<25-Eperiod->Value;j++)
			{	vidVInf = true;
				for(int n=0;n<trmnlsPep.Length;n++)
				{   if(trmnlsPep[n].termPckd == i)
					{
						if(!(j > trmnlsPep[n].toT || j+Eperiod->Value -1 < trmnlsPep[n].fromT)) vidVInf = false;
					}
				}
				if(vidVInf)
				{
					prstart = j;
					helptrmn = i;
					j=24;
					i = termsavlble +1;
				}

			}
		}
	}
	if(!vidVInf &&trmnlsPep.Length!=0)
	{
		StatBar ->Panels->Items[0]->Text =L"Временной промежуток с "+IntToStr(EFromT->Value)+L" до "+IntToStr(EToT->Value)+" недоступен!";
		return;
	}
	else StatBar ->Panels->Items[0]->Text =L"Резервирование временного промежутка c "+
	IntToStr(EFromT->Value)+L" до " + IntToStr(EToT->Value) + L" прошло успешно!";
	if( trmnlsPep.Length ==0)
	{
		prstart = 0;
		helptrmn = 1;
	}
	try
	{
		trmnlsPep.Length +=1;
	}catch(...)
	{
		StatBar ->Panels->Items[0]->Text = L"Произошла ошибка выделения памяти при попытке резервирования времени!";
		return;
	}
	if(!frmt_nddtme->Checked || forDTT)
	{
		trmnlsPep[trmnlsPep.Length -1].fromT = EFromT->Value;
		trmnlsPep[trmnlsPep.Length -1].toT = EToT->Value;
	}
	else
	{
		trmnlsPep[trmnlsPep.Length -1].fromT = prstart;
		trmnlsPep[trmnlsPep.Length -1].toT = prstart+ Eperiod->Value -1;
	}
	trmnlsPep[trmnlsPep.Length -1].termPckd = helptrmn;
	trmnlsPep[trmnlsPep.Length-1].Phio = AnsiString(E_Phio->Text).c_str();
	trmnlsPep[trmnlsPep.Length-1].USlen = trmnlsPep[trmnlsPep.Length-1].Phio.size();
	if(StrTabl->RowHeights[1]==-1) StrTabl->RowHeights[1]=StrTabl->DefaultRowHeight;
	else StrTabl->RowCount +=1;
	StrTabl->Cells[0][trmnlsPep.Length]=String(trmnlsPep[trmnlsPep.Length-1].Phio.c_str());
	E_Phio->Text=L"";
	Menu_Save_R->Enabled = true;
	SAVE->Enabled = true;
	Menu_Create ->Enabled = true;
	Menu_SaveAs->Enabled = true;
	Menu_StrT_D->Enabled=true;
	Menu_StrT_T->Enabled=true;
	Ch_autoWClick(Sender);
	DTT->Refresh();
	StrTabl->Refresh();
}
//--------------------------------------------------------------------------
void __fastcall TMainForm::EFromTChange(TObject *Sender)
{
	if(EFromT->Value > EToT->Value) EToT->Value  = EFromT->Value;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_CreateClick(TObject *Sender)
{
	if(Menu_Save->Enabled ==true)
	{
		switch(Application->MessageBoxW((L"Вы хотите сохранить измененения в файл "+OpenDialog->FileName+L"?").w_str(),
		Application->Title.w_str(),MB_YESNOCANCEL|MB_ICONQUESTION | MB_DEFBUTTON3))
		{
			case ID_YES: SAVEExecute(Sender); OpenDialog->FileName="Безымянный";
			break;
			case ID_NO: OpenDialog->FileName=L"Безымянный";
			break;
			case ID_CANCEL:return;
		}
	}
	for(int i=trmnlsPep.Length;i>0;i--)
	{
		StrTabl->Rows[i]->Clear();
	}
	StrTabl->RowCount=2;
	StrTabl->RowHeights[1] =-1;
	DTT->Refresh();
	StrTabl->Refresh();
	Etrmnls->Value=1;
	Menu_Create->Enabled=false;
	Cdo->Checked=false;
	Etrmnls->Enabled=true;
    termsavlble=1;
	trmnlsPep.Length = 0;
	SAVE->Enabled = false;
	Menu_SaveAs->Enabled = false;
	Menu_Save_R->Enabled= false;
	Menu_StrT_D->Enabled=false;
	Menu_StrT_T->Enabled=false;
	forsort = 0;
	StatBar->Panels->Items[1]->Text = L"Безымянный";
    StatBar->Panels->Items[0]->Text=L"";
	OpenDialog->FileName=L"Безымянный";
	StrTabl->Refresh();

}
//---------------------------------------------------------------------------
void __fastcall TMainForm::FormCreate(TObject *Sender)
{
	StrTabl->RowHeights[1]=-1;
	StrTabl->Cells[0][0] = L"Пользователь \\ Время";
	for(int i=0;i<24;i++)
	{   DTT->Cells[i][0]=IntToStr(i);
		StrTabl->Cells[i+1][0] = IntToStr(i);
	}
	OpenDialog->FileName=L"Безымянный";
	bSaved=false;
	forDTT=false;
    forsort = 0;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::StrTablDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect,
		  TGridDrawState State)
{
	if(ARow == 0 && ACol==0 && forsort !=0)
	{
		if(abs(forsort)==2) Rect.Left +=StrTabl->ColWidths[ACol]-16;
		else Rect.Left +=109;
		Rect.Right =Rect.Left+11;
		Rect.Bottom-=3;
		StrTabl->Canvas->Brush->Color = clWindow;
		StrTabl->Canvas->FillRect(Rect);
		if(forsort>0) StrTabl->Canvas->TextRect(Rect,Rect.Left+1,Rect.Top-1,L"▲");
		else StrTabl->Canvas->TextRect(Rect,Rect.Left+1,Rect.Top-1,L"▼");
		return;
	}
    if(ARow==0 ||ACol==0) return;
	tElem fordraw;
	for(int i=0;i<trmnlsPep.Length;i++)
	{
	  if(String(trmnlsPep[i].Phio.c_str())== StrTabl->Cells[0][ARow] ) fordraw=i;
	}

	if(ACol >= trmnlsPep[fordraw].fromT+1 && ACol <= trmnlsPep[fordraw].toT+1)
	{
		Rect.Left-=4;
		StrTabl->Canvas->Brush->Color=(TColor)0x0083D66D;
		StrTabl->Canvas->FillRect(Rect);
		StrTabl->Canvas->TextRect(Rect,Rect.Left,Rect.Top,IntToStr(trmnlsPep[fordraw].termPckd));
	}
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::DTTDrawCell(TObject *Sender, int ACol, int ARow, TRect &Rect,
		  TGridDrawState State)
{   bool zanat =false;
	for(int i=1;i<=termsavlble;i++)
	{
		if(!zanat)
		{
			zanat=true;
			for(int j=0;j<trmnlsPep.Length;j++)
			{
				if(trmnlsPep[j].termPckd == i && (trmnlsPep[j].fromT<=ACol && ACol<=trmnlsPep[j].toT)) zanat=false;
			}

		}
	}
	if(zanat &&Bobrstart->Enabled==true) DTT->Canvas->Brush->Color=clAqua;
	else DTT->Canvas->Brush->Color=(TColor)0x007370EB;
	Rect.Left-=4;
	DTT->Canvas->FillRect(Rect);
	DTT->Canvas->TextRect(Rect,Rect.Left+4,Rect.Top+2,DTT->Cells[ACol][ARow]);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_StrT_DClick(TObject *Sender)
{
		switch(Application->MessageBoxW(L"Вы хотите удалить данные о выбранном (-ых)\nпользователе (-ях)?",
		Application->Title.w_str(),MB_YESNO|MB_ICONQUESTION| MB_DEFBUTTON2))
		{
			case ID_YES: break;
			case ID_NO:  return;
		}
		tElem bot=StrTabl->Selection.Bottom, top=StrTabl->Selection.Top , delRonQ;
		for(int n=bot;n>=top;n--)
		{
			for(int i=0;i<trmnlsPep.Length;i++)
			{
				if(String(trmnlsPep[i].Phio.c_str())==StrTabl->Cells[0][n]) delRonQ=i;
			}
			for(int i=delRonQ;i<trmnlsPep.Length-1;i++)
			{
				trmnlsPep[i]=trmnlsPep[i+1];
			}
			trmnlsPep.Length-=1;
			for(int i=n;i<StrTabl->RowCount;i++)
			{
				StrTabl->Cells[0][i]=StrTabl->Cells[0][i+1];
			}
			StrTabl->Rows[StrTabl->RowCount-1]->Clear();
			if(StrTabl->RowCount==2) StrTabl->RowHeights[1]=-1;
			if(StrTabl->RowHeights[1]!=-1)StrTabl->RowCount-=1;
		}
		if(StrTabl->RowHeights[1]==-1)
		{
			Menu_Create->Enabled=false;
			SAVE->Enabled = false;
			Menu_SaveAs->Enabled = false;
			Menu_Save_R->Enabled = false;
			Menu_StrT_D->Enabled=false;
			Menu_StrT_T->Enabled=false;
		}
		else SAVE -> Enabled = true;
		Ch_autoWClick(Sender);
		StatBar->Panels->Items[0]->Text = L"Данные успешно удалены!";
    DTT->Refresh();
	StrTabl->Refresh();

}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_StrT_TClick(TObject *Sender)
{
	if(StrTabl->Selection.Top != StrTabl->Selection.Bottom) return;
	unsigned _int16 tekmas;
		for(int i=0;i<trmnlsPep.Length;i++)
		{
		  if(String(trmnlsPep[i].Phio.c_str())==StrTabl->Cells[0][StrTabl->Selection.Top]) tekmas=i;
		}
		switch(Application->MessageBoxW((L"Вы хотите изменить зарезервированный промежуток времени пользователя "+
		String(trmnlsPep[tekmas].Phio.c_str())+ L"?").w_str(),Application->Title.w_str(),
		MB_YESNO|MB_ICONQUESTION | MB_DEFBUTTON2))
			{
				case ID_YES:break;
				case ID_NO: return;
			}
		bool vidVInf=false;
		tElem left=StrTabl->Selection.Left-1, right=StrTabl->Selection.Right-1
			,Strk=StrTabl->Selection.Top, helptrmn;
		for(int i=1;i<=termsavlble;i++)
		{
			if(!vidVInf)
			{
				vidVInf=true;
				for(int j=0;j<trmnlsPep.Length;j++)
				{	if(trmnlsPep[j].termPckd == i && j!=tekmas)
					{
						if(!(left > trmnlsPep[j].toT || right < trmnlsPep[j].fromT)) vidVInf= false;
					}
					if(j== trmnlsPep.Length-1 && vidVInf) helptrmn = i;
				}
			}
		}
		if(!vidVInf)
		{
			StatBar ->Panels->Items[0]->Text =L"Невозможно изменить временной промежуток на промежуток c "+IntToStr(left)+
			L" до "+IntToStr(right)+ L"!";
			return;
		}
		else 	StatBar ->Panels->Items[0]->Text =L"Изменение зарезерварованного промежутка прошло успешно!";
		trmnlsPep[tekmas].fromT = left;
		trmnlsPep[tekmas].toT = right ;
		trmnlsPep[tekmas].termPckd = helptrmn;
		SAVE -> Enabled = true;
		DTT->Refresh();
		StrTabl->Refresh();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Menu_DTT_EClick(TObject *Sender)
{
	if(!Bobrstart->Enabled) return;
    forDTT=true;
	unsigned _int8 left=EFromT->Value, right=EToT->Value;
	EFromT->Value = DTT->Selection.Left;
	EToT->Value = DTT->Selection.Right;
	BobrstartClick(Sender);
	EFromT->Value= left;
	EToT->Value=right;
	forDTT=false;
	DTT->Refresh();
	StrTabl->Refresh();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::StrTablDblClick(TObject *Sender)
{
	if(StrTabl->RowHeights[1]==-1) return;
	TPoint p;
	GetCursorPos(&p);
	p=StrTabl->ScreenToClient(p);
	TGridCoord gc=StrTabl->MouseCoord(p.X,p.Y);
	if(gc.X !=0 || gc.Y!=0) return;
	tElem bufer;
	DynamicArray<tElem> sortm;
	sortm.Length=trmnlsPep.Length;
	for(int i=0;i<sortm.Length;i++)
	{
		sortm[i]=i;
	}
	if(p.X>128) gc.X=1;
	for(int i=0;i<trmnlsPep.Length;i++)
	{
		for(int j=0;j<trmnlsPep.Length - i-1;j++)
		{   if(gc.X==1)
			{	if((forsort!= -(gc.X+1)&&(trmnlsPep[sortm[j]].toT-trmnlsPep[sortm[j]].fromT) > (trmnlsPep[sortm[j+1]].toT-trmnlsPep[sortm[j+1]].fromT))||
				(forsort == -(gc.X+1)&&(trmnlsPep[sortm[j]].toT-trmnlsPep[sortm[j]].fromT) < (trmnlsPep[sortm[j+1]].toT-trmnlsPep[sortm[j+1]].fromT)))
				{
					bufer = sortm[j];
					sortm[j] = sortm[j+1];
					sortm[j+1] = bufer;
				}
			}
			else
			{	if((forsort!= -(gc.X+1) && String(trmnlsPep[sortm[j]].Phio.c_str()).Length() > String(trmnlsPep[sortm[j+1]].Phio.c_str()).Length())||
				(forsort == -(gc.X+1) && String(trmnlsPep[sortm[j]].Phio.c_str()).Length() < String(trmnlsPep[sortm[j+1]].Phio.c_str()).Length()))
				{
                    bufer = sortm[j];
					sortm[j] = sortm[j+1];
					sortm[j+1] = bufer;
				}
			}
		}
	}
	for(int i=1;i<StrTabl->RowCount;i++)
	{
		StrTabl->Cells[0][i]=String(trmnlsPep[sortm[i-1]].Phio.c_str());
	}
    if(forsort!= -(gc.X+1)) forsort= -(gc.X+1);
	else forsort = gc.X+1;
	StrTabl->Refresh();
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::E_PhioKeyPress(TObject *Sender, System::WideChar &Key)
{
	E_Phio->SelStart=E_Phio->Text.Length();
	if(!((Key>=1040&&Key<=1103)||(Key>=97&&Key<=122)||(Key>=65&&Key<=90)||Key==8||Key==13||Key==32||Key==46||Key==45))
	{
		StatBar ->Panels->Items[0]->Text =L"Недопустимый символ '"+UnicodeString(Key)+"'";
		Key=0;
	}
    if(Key==45)
		for(int i=1;i<=E_Phio->Text.Length();i++)
			if(E_Phio->Text[i]==L'-')
			{	Key=0;
				break;
			}
	if(E_Phio->Text.Length()<=1&&(Key==32 || Key==46||Key==45)) Key=0;

	if(E_Phio->Text.Length()==0 && ((Key>=97 && Key<=122 )|| (Key>=1072 && Key<=1103))) Key-=32;
	if(E_Phio->Text.Length()>0)
	{
		if(E_Phio->Text[E_Phio->Text.Length()]!=L' ' && E_Phio->Text[E_Phio->Text.Length()]!=L'.' &&
			((Key>=65 && Key<=90)|| (Key>=1040 && Key<=1071))) Key+=32;

		if((E_Phio->Text[E_Phio->Text.Length()]==L'-'||E_Phio->Text[E_Phio->Text.Length()]==L' ') &&
			((Key>=97 && Key<=122)|| (Key>=1072 && Key<=1103))) Key-=32;

		if((E_Phio->Text[E_Phio->Text.Length()]==L'.' && (Key!=32 && Key!=8 ))||
			((E_Phio->Text[E_Phio->Text.Length()]==L' ' || E_Phio->Text[E_Phio->Text.Length()]==L'-')&&
			(Key==32 || Key==46||Key==45))) Key=0;
	}
	if(E_Phio->Text.Length()>1)if((E_Phio->Text[E_Phio->Text.Length()-1]!=L' ' && Key==46)||
	(E_Phio->Text[E_Phio->Text.Length()-1]==L' ' && Key==45)) Key=0;
	if(E_Phio->Text.Length()>3)
	{	if((E_Phio->Text[E_Phio->Text.Length()-3]==L'.'&& Key!=8)||
		(E_Phio->Text[E_Phio->Text.Length()-1]==L' ' && Key!=46 && Key!=8)) Key=0;
	}
	if(E_Phio->Text.Length()>89 && Key!=8)
	{
		StatBar ->Panels->Items[0]->Text =L"Ограничение в 90 симолов достигнуто!";
		Key=0;
	}
    if(Key!=0) StatBar->Panels->Items[0]->Text=L"";
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::Ch_autoWClick(TObject *Sender)
{
if(Ch_autoW->Checked)
	{
		tElem width=StrTabl->Canvas->TextWidth(StrTabl->Cells[0][0]+8);
		for(int i=0;i<trmnlsPep.Length;i++)
		if(width< StrTabl->Canvas->TextWidth(String(trmnlsPep[i].Phio.c_str())+8))
			width=StrTabl->Canvas->TextWidth(String(trmnlsPep[i].Phio.c_str())+8);
		StrTabl->ColWidths[0] = width;
	}
else StrTabl->ColWidths[0]=StrTabl->Canvas->TextWidth(StrTabl->Cells[0][0]+8);
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::SAVEExecute(TObject *Sender)
{
    if(OpenDialog->FileName ==L"Безымянный")
	{
		Menu_SaveAsClick(Sender);
		return;
	}
	ofstream ofle(AnsiString(OpenDialog->FileName).c_str() , ios::binary);

	if (!ofle.is_open()){
		Application->MessageBox(L"Файл не открыт!",Application->Title.w_str(),MB_OK|MB_ICONERROR);
		bSaved = false;
		return;
	}
	tElem Prtct = trmnlsPep.Length;
	ofle.write((char*)&Prtct, sizeof(tElem));
	ofle.write((char*)&termsavlble, sizeof(tElem));
	for (int i = 0; i < trmnlsPep.Length; i++)
	{
		ofle.write((char *)&trmnlsPep[i].USlen,sizeof(unsigned _int8));
		ofle.write((char*)trmnlsPep[i].Phio.c_str(),trmnlsPep[i].USlen);
		ofle.write((char*)&trmnlsPep[i].termPckd, sizeof(tElem));
		ofle.write((char*)&trmnlsPep[i].fromT, sizeof(unsigned _int8));
		ofle.write((char*)&trmnlsPep[i].toT, sizeof(unsigned _int8));
	}
	ofle.close();
	StatBar->Panels->Items[1]->Text = OpenDialog->FileName;
	StatBar ->Panels->Items[0]->Text = L"Данные успешно сохранены в файле "+OpenDialog->FileName+L".";

	bSaved = true;
	SAVE -> Enabled = false;
}
//---------------------------------------------------------------------------
void __fastcall TMainForm::StrTablRowMoved(TObject *Sender, int FromIndex, int ToIndex)
{forsort = 0;}
//---------------------------------------------------------------------------




